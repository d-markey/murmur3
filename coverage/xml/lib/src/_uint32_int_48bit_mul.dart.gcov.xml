<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2023-01-01" filename="_uint32_int_48bit_mul.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="1.0" lines-covered="34" lines-valid="34" package="/lib/src" testname="lcov.info" version="1.5">
    <lines>
        <line>
            <code>import 'uint.dart' show IUint32;</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// 32-bit arithmetic based on a 32-bit int value. This implementation uses</code>
        </line>
        <line>
            <code>/// multiplication on 16-bit numbers for compatibility with browser platforms</code>
        </line>
        <line>
            <code>/// where integer values are safe up to `pow(2, 53)` only.</code>
        </line>
        <line>
            <code>// ignore: camel_case_types</code>
        </line>
        <line>
            <code>class Uint32_int_48bit_mul implements IUint32 {</code>
        </line>
        <line>
            <code>  static const _mask16 = 0x0000FFFF;</code>
        </line>
        <line>
            <code>  static const _mask32 = 0xFFFFFFFF;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="2">
            <code>  static int _clamp(int n) =&gt; n &amp; _mask32;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="3">
            <code>  Uint32_int_48bit_mul(int num) : _num = _clamp(num);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>  int get value =&gt; _num;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>  int _num;</code>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>  int loadLEBytes(List&lt;int&gt; bytes, int offset, {int fromByte = 0}) {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>    var idx = offset, len = bytes.length, count = 0;</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>    if (fromByte == 0) {</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>      _num = 0;</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="5">
            <code>    var n = fromByte * 8;</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>    while (idx &lt; len &amp;&amp; n &lt; 32) {</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8">
            <code>      _num |= bytes[idx] &lt;&lt; n;</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>      count++;</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>      idx++;</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>      n += 8;</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>    }</code>
        </line>
        <line hits="4">
            <code>    return count;</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>  }</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="7">
            <code>  void add(IUint32 other) =&gt; _num = _clamp(_num + other.value);</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  void mul(IUint32 other) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3">
            <code>    final n = other.value;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>    // 32-bit multiplication</code>
        </line>
        <line>
            <code>    // on browser platforms, ints are safe up to 53-bit</code>
        </line>
        <line>
            <code>    // decomposing multiplication as 32-bit * 16-bit yielding 48-bits</code>
        </line>
        <line hits="6">
            <code>    final lo = (_num * (n &amp; _mask16)) &amp; _mask32;</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4">
            <code>    final hi = (_num * (n &gt;&gt; 16)) &amp; _mask16;</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="6">
            <code>    _num = _clamp(lo + (hi &lt;&lt; 16));</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2">
            <code>  }</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10">
            <code>  void rotl(int n) =&gt; _num = _clamp(_num &lt;&lt; n) | (_num &gt;&gt; (32 - n));</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>  void shl(int n) =&gt; _num = _clamp(_num &lt;&lt; n);</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5">
            <code>  void xor(IUint32 other) =&gt; _num ^= other.value;</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code/>
        </line>
        <line hits="1">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6">
            <code>  void xshr(int n) =&gt; _num ^= (_num &gt;&gt; n);</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line>
            <code>}</code>
        </line>
        <line>
            <code/>
        </line>
        <line>
            <code>/// Type definition for platform-specific implementation</code>
        </line>
        <line>
            <code>// ignore: camel_case_types</code>
        </line>
        <line>
            <code>typedef Uint32_int_xplat = Uint32_int_48bit_mul;</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false"/>
    <base href="../../"/>
    <base href="../../"/>
</coverage>
